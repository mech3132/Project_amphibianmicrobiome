#       l <- 13
#       # metric <- "Metric"
#       # if ( bd=="infect" ) {
#       #   col_imp <- "%IncMSE"
#       # }
#       metric <- "taxonomy"
#     } else {
#       l <- 15
#       metric <- "taxonomy"
#
#     }
#
#     for ( tax in 1:l) {
#       if (is.null(curr_imp$inhibitory[tax])){
#         inhib_phrase <- ""
#       } else if (is.na(curr_imp$inhibitory[tax]) ) {
#         inhib_phrase <- ""
#       } else if (curr_imp$inhibitory[tax]==1) {
#         inhib_phrase <- " (inhibitory)"
#       } else {
#         inhib_phrase <- ""
#       }
#
#       if ( bd_type == "infect" ) {
#         summary_randomforest[current_row+1, c("Train_set_MSE","Validation_set_MSE")] <- c(final_error, valid_set_error)
#         summary_randomforest[current_row+tax,"Top_importance"] <- paste0(curr_imp[tax,metric], inhib_phrase)
#         summary_randomforest[current_row+tax,"IncrMSE"] <- paste0(col_phrase, round(curr_imp[tax,col_imp],2))
#       } else if ( bd_type == "PABD") {
#         summary_randomforest[current_row+1, c("Train_set_error_rate","Validation_set_error_rate")] <- c(final_error, valid_set_error)
#         summary_randomforest[current_row+tax,"Top_importance"] <- paste0(curr_imp[tax,metric], inhib_phrase)
#         summary_randomforest[current_row+tax,"MeanDecrAccuracy"] <- paste0(col_phrase, round(curr_imp[tax,col_imp],2))
#       }
#     }
#   }
#
#   return(summary_randomforest)
# }
# make_summary_RF <- function(all_output, otu_type=c("PA","rank","count"), bd_type=c("PABD","infect"), repl=c(1,2,3)) {
#   # all_output <- all_RF_predictBD
#   # otu_type <- "rank"
#   # bd_type="infect"
#   # Create empty matrix
#   # Get error explained by each model into table
#   base_df <- data.frame(Model=c("onlyp",rep(NA,12),"nop",rep(NA,14),"withp",rep(NA,14)))
#   if (bd_type == "infect" ) {
#     summary_randomforest <- cbind(base_df, data.frame(Train_set_MSE=NA, Validation_set_MSE=NA, Top_importance=NA, IncrMSE=NA))
#   } else {
#     summary_randomforest <- cbind(base_df, data.frame(Train_set_error_rate=NA, Validation_set_error_rate=NA, Top_importance=NA, MeanDecrAccuracy=NA))
#
#   }
#
#   for ( p_type in c("onlyp","nop","withp") ) {
#     curr_cat <- all_output[[paste(otu_type, p_type, bd_type, repl,sep="_")]]
#     curr_model <- curr_cat[["RF"]]
#     error_rate_predict <- curr_cat[[testSetError]]
#     if ( bd_type=="PABD" ) {
#       error_rate <- curr_model$err.rate[,"OOB"][nrow(curr_model$err.rate)]*100
#       var_explained <- NA
#       final_error <- paste0(round(error_rate, 3), "%")
#       valid_set_error <- paste0(round(error_rate_predict,3),"%")
#     } else if (bd_type=="infect") {
#       error_rate <- curr_model$mse[length(curr_model$mse)]
#       var_explained <- curr_model$rsq[length(curr_model$rsq)]
#       final_error <- paste0(round(error_rate, 3), ", ", round(var_explained*100, 2),"% var explained")
#       valid_set_error <- paste0(round(error_rate_predict,3))
#     }
#     current_row <- ifelse(p_type=="onlyp",0,ifelse(p_type=="nop",13,28))
#
#     # Finally, get top importance factors
#     curr_imp <- curr_cat[["importance"]]
#     if ( bd_type == "infect") {
#       col_imp <- "X.IncMSE"
#       col_phrase <- "%IncrMSE="
#     } else if ( bd_type == "PABD" ) {
#       col_imp <- "MeanDecreaseAccuracy"
#       col_phrase <- "MeanDecrAccuracy="
#     }
#
#     # col_imp changes if it's p model
#     # Only 13 factors in p model
#     if ( p_type=="onlyp") {
#       l <- 13
#       # metric <- "Metric"
#       # if ( bd=="infect" ) {
#       #   col_imp <- "%IncMSE"
#       # }
#       metric <- "taxonomy"
#     } else {
#       l <- 15
#       metric <- "taxonomy"
#
#     }
#
#     for ( tax in 1:l) {
#       if (is.null(curr_imp$inhibitory[tax])){
#         inhib_phrase <- ""
#       } else if (is.na(curr_imp$inhibitory[tax]) ) {
#         inhib_phrase <- ""
#       } else if (curr_imp$inhibitory[tax]==1) {
#         inhib_phrase <- " (inhibitory)"
#       } else {
#         inhib_phrase <- ""
#       }
#
#       if ( bd_type == "infect" ) {
#         summary_randomforest[current_row+1, c("Train_set_MSE","Validation_set_MSE")] <- c(final_error, valid_set_error)
#         summary_randomforest[current_row+tax,"Top_importance"] <- paste0(curr_imp[tax,metric], inhib_phrase)
#         summary_randomforest[current_row+tax,"IncrMSE"] <- paste0(col_phrase, round(curr_imp[tax,col_imp],2))
#       } else if ( bd_type == "PABD") {
#         summary_randomforest[current_row+1, c("Train_set_error_rate","Validation_set_error_rate")] <- c(final_error, valid_set_error)
#         summary_randomforest[current_row+tax,"Top_importance"] <- paste0(curr_imp[tax,metric], inhib_phrase)
#         summary_randomforest[current_row+tax,"MeanDecrAccuracy"] <- paste0(col_phrase, round(curr_imp[tax,col_imp],2))
#       }
#     }
#   }
#
#   return(summary_randomforest)
# }
get_mf_pred_temp <- function(p_type, otu_type, bd_type, p, keepSp=TRUE) {
if ( p_type == "onlyp") {
mf_pred_temp <- p %>%
separate(indivID, into=c("species","indiv"), remove=FALSE) %>%
mutate(species=factor(species)) %>%
arrange(indivID) %>%
select(-indiv)
} else {
p_to_add <- get(ifelse(p_type == "withp", "p", "p_infectonly"))
mf_temp <- get(paste0("mf_",otu_type))
# Filter mf and re-arrange to be compatible with randomforest
mf_pred_temp <- mf_temp %>%
filter(prepost=="Pre", Bd_exposure=="Bd-exposed") %>%
select(-c("SampleID","prepost","Bd_exposure")) %>%
gather(-c(indivID),key=OTU, value=rank) %>%
mutate(rank=as.numeric(rank)) %>%
group_by(indivID, OTU) %>%
summarize(aveRank=mean(rank)) %>%
ungroup() %>%
separate(indivID, into=c("species","indiv"), remove=FALSE) %>%
select(-indiv) %>%
filter(!is.na(aveRank)) %>%
spread(key=OTU, value=aveRank)  %>%
left_join(p_to_add) %>%
arrange(indivID) %>%
mutate(species=factor(species))
}
# Mutate infection depending on question
if (bd_type == "PABD" ) {
mf_pred_temp_bd  <- mf_pred_temp %>%
mutate(PABD = factor(ifelse(infect>0,"INFECTED","NOT_INFECTED"))) %>%
select(-infect) %>%
rename(response=PABD) %>%
select(-c(indivID))
indiv_list <- mf_pred_temp%>%
mutate(PABD = factor(ifelse(infect>0,"INFECTED","NOT_INFECTED"))) %>%
select(-infect) %>%
rename(response=PABD) %>%
select(indivID)
# Error_metric <- "MeanDecreaseAccuracy"
} else {
mf_pred_temp_bd <- mf_pred_temp %>%
filter(infect >0) %>%
rename(response=infect) %>%
select(-c(indivID))
indiv_list <- mf_pred_temp %>%
filter(infect >0) %>%
rename(response=infect) %>%
select(indivID)
}
if ( !keepSp ) {
mf_pred_temp_bd <- mf_pred_temp_bd %>%
select(-species)
}
return(list(mf_pred_temp_bd,indiv_list))
}
### get rsq #####
getR2 <- function(Test_pred, Test_obs) {
ss_tot <- sum((Test_obs-mean(Test_obs))^2)
ss_err <- sum((Test_obs-Test_pred)^2)
return(1-ss_err/ss_tot)
}
extractComparison <- function(allOutput, bd_type=c("infect","PABD"), otu_types = c("PA","count"),replicates=c(1), prop_levels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8), p_types=c("onlyp","nop","withp")) {
# allOutput = RF_infect_paramsweep_1
# RF_infect_paramsweep_1$PA_nop_infect_0.8_3
first=TRUE
# bd_type="infect"
for (otu_type in otu_types) {
# otu_type="PA"
for ( p_type in p_types ) {
# p_type="nop"
for ( prop in prop_levels) {
# prop=0.8
for (repl in replicates) {
curr_model <- allOutput[[paste(otu_type,p_type,bd_type,prop,repl, sep="_")]]
if (first) {
dat_comparison <- cbind(curr_model$test_train_comparison, p_type=p_type, prop=prop, repl=repl, otu_type=otu_type)
first <- FALSE
} else {
dat_comparison <- rbind(dat_comparison, cbind(curr_model$test_train_comparison, p_type=p_type, prop=prop, repl=repl, otu_type=otu_type))
}
}
}
}
}
return(dat_comparison)
}
extractTrainError <- function(allOutput, bd_type=c("infect","PABD"), otu_types = c("PA","count"), error_type=c("R2","MSE","errorRate"), replicates=c(1:3), prop_levels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8), p_types=c("onlyp","nop","withp")) {
# prop_levels <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8)
# p_types <- c("onlyp","nop","withp")
# otu_types=c("PA","count")
# bd_type="PABD"
# error_type="comparison"
# replicates=c(1:3)
# allOutput= RF_PABD_parasweep_1
first=TRUE
for (otu_type in otu_types) {
for ( p_type in p_types ) {
for ( prop in prop_levels) {
for (repl in replicates) {
# What row to insert
curr_model <- allOutput[[paste(otu_type,p_type,bd_type,prop,repl, sep="_")]]
if ( bd_type == "infect") {
if ( error_type == "R2") {
toAdd <- data.frame(error=as.numeric(curr_model$RF$rsq[length(curr_model$RF$rsq)]), otu_type=otu_type, p_type=p_type, prop=as.numeric(prop), repl=as.numeric(repl), error_type=error_type)
} else if ( error_type == "MSE") {
toAdd <- data.frame(error=as.numeric(curr_model$RF$mse[length(curr_model$RF$mse)]), otu_type=otu_type, p_type=p_type, prop=as.numeric(prop), repl=as.numeric(repl), error_type=error_type)
} else {
print("Invalid error type")
toAdd<- NA
toAdd<- NA
}
} else {
toAdd <- data.frame(error=as.numeric(curr_model$RF$err.rate[,"OOB"][nrow(curr_model$RF$err.rate)]), otu_type=otu_type, p_type=p_type, prop=as.numeric(prop), repl=as.numeric(repl), error_type=error_type)
}
if (first) {
dat_train <- toAdd
first <-FALSE
} else {
dat_train <- rbind(dat_train, toAdd)
}
}
}
}
}
return(dat_train)
}
extractTrainErrorLOO <- function(allOutput, bd_type, otu_type, p_type) {
first <- TRUE
for ( curr_model in allOutput ) {
indivID <- curr_model$test_train_comparison$indivID
if ( bd_type == "infect") {
error_type = "MSE"
toAdd <- data.frame(error=as.numeric(curr_model$RF$mse[length(curr_model$RF$mse)]), otu_type=otu_type, p_type=p_type, error_type=error_type, indiv_LOO = indivID)
} else {
error_type = "errorRate"
toAdd <- data.frame(train_error=as.numeric(curr_model$RF$err.rate[,"OOB"][nrow(curr_model$RF$err.rate)]), otu_type=otu_type, p_type=p_type, error_type=error_type, indiv_LOO = indivID)
}
if (first) {
dat_train <- toAdd
first <-FALSE
} else {
dat_train <- rbind(dat_train, toAdd)
}
}
return(dat_train)
}
### Extract
extractItemLOO<- function(allOutput=list(), bd_type, otu_type, p_type, extract="test_train_comparison")  {
# allOutput <- RF_infect_onlyp_wsp_LOO
first <- TRUE
for ( item in allOutput ) {
indivID <- item$test_train_comparison$indivID
if (first) {
temp <- item[[extract]]
temp$indivID <- indivID
all <- temp
first <- FALSE
} else {
temp <- item[[extract]]
temp$indivID <- indivID
all <- rbind(all,temp)
}
}
all <- cbind(all, bd_type=bd_type, otu_type=otu_type, p_type=p_type)
return(all)
}
extractItem  <- function(allOutput=list(), bd_type=c("infect","PABD"), otu_type = c("rank","PA","count"), p_types=c("onlyp","nop","withp"), reps=c(1:10)
, extract="test_train_comparison", repstart=1)  {
i <- repstart
first <- TRUE
for ( R in allOutput) {
for ( r in reps ) {
# r=1
# otu_type="PA"
# p_types="onlyp"
# bd_type="PABD"
new <- cbind(R[[paste0(otu_type,"_",p_types,"_", bd_type,"_0.8","_",r)]][[paste0(extract)]],rep=i)
i <- i+1
if (first) {
all <- new
} else {
all <- rbind(all,new)
}
first <- FALSE
}
}
return(all)
}
#
# extractImportance <- function(allOutput, bd_type=c("infect","PABD"), otu_type = c("rank","PA","count"), replicates=c(1), top=5) {
#   prop_levels <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8)
#   p_types <- c("onlyp","nop","withp")
#
#   if ( bd_type == "infect") {
#     metric <- "X.IncMSE"
#   } else {
#     metric <- "MeanDecreaseAccuracy"
#   }
#   all_tax <- c()
#   for ( p_type in p_types ) {
#     for ( prop in prop_levels) {
#       for (repl in replicates) {
#         curr_model <- allOutput[[paste(otu_type,p_type,bd_type,prop,repl, sep="_")]]
#         all_tax <- c(all_tax,curr_model$importance[1:top,c("taxonomy")])
#       }
#     }
#   }
#   all_tax <- unique(all_tax)
#
#   dat_importance <- data.frame(taxonomy=rep(all_tax, length(p_types)*length(prop_levels)*length(replicates))
#                                , importance=NA
#                                , model=rep(p_types, each=length(all_tax)*length(prop_levels)*length(replicates))
#                                , prop=rep(rep(prop_levels,each=length(all_tax)*length(replicates)),length(p_types))
#                                , replicates = 1)
#   for ( p_type in p_types ) {
#     for ( prop in prop_levels) {
#       for (repl in replicates) {
#         current_rows <- which(dat_importance$model==p_type& dat_importance$prop==prop)
#         curr_model <- allOutput[[paste(otu_type,p_type,bd_type,prop,repl, sep="_")]]
#         dat_importance[current_rows,"importance"] <- curr_model$importance[match(all_tax,curr_model$importance$taxonomy),metric]
#       }
#     }
#   }
#   return(dat_importance)
# }
compare_infect_withpcount_wsp_LOO <- extractItemLOO(RF_infect_withpcount_wsp_LOO, bd_type = bd_type, p_type=p_type, otu_type = otu_type,extract = "test_train_comparison" )
save(compare_infect_withpcount_wsp_LOO,file="./5_random_forest_LOO/comparison_infect_withpcount_wsp_LOO.RData" )
importance_infect_withpcount_wsp_LOO <-extractItemLOO(RF_infect_withpcount_wsp_LOO, bd_type = bd_type, p_type=p_type, otu_type = otu_type,extract = "importance")
save(importance_infect_withpcount_wsp_LOO,file="./5_random_forest_LOO/importance_infect_withpcount_wsp_LOO.RData" )
MSE_infect_withpcount_wsp_LOO <- extractTrainErrorLOO(RF_infect_withpcount_wsp_LOO, bd_type = bd_type, p_type=p_type, otu_type = otu_type)
save(MSE_infect_withpcount_wsp_LOO,file="./5_random_forest_LOO/MSE_infect_withpcount_wsp_LOO.RData" )
remove(RF_infect_withpcount_wsp_LOO)
# Updated random forest LOO results
load("./5_random_forest_LOO/compare_infect_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_count_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_count_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_withpcount_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_withpcount_wsp_LOO.RData")
rbind(cbind(compare_infect_onlyp_nosp_LOO, species=FALSE)
, cbind(compare_infect_onlyp_wsp_LOO, species=TRUE)) %>%
ggplot() + geom_point(aes(x=Test_obs, y=Test_pred, col=species)) + geom_abline(aes(intercept=0, slope=1))+
ylim(0,8)+ xlim(0,8)
rbind(cbind(compare_infect_count_nosp_LOO, species=FALSE)
, cbind(compare_infect_count_wsp_LOO, species=TRUE)) %>%
ggplot() + geom_point(aes(x=Test_obs, y=Test_pred, col=species)) + geom_abline(aes(intercept=0, slope=1))+
ylim(0,8)+ xlim(0,8)
rbind(cbind(compare_infect_PA_nosp_LOO, species=FALSE)
, cbind(compare_infect_PA_wsp_LOO, species=TRUE)) %>%
ggplot() + geom_point(aes(x=Test_obs, y=Test_pred, col=species)) + geom_abline(aes(intercept=0, slope=1))+
ylim(0,8)+ xlim(0,8)
## Accuracy
errorRate_test_all <- rbind(cbind(compare_PABD_onlyp_nosp_LOO, species=FALSE), cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_count_nosp_LOO, species=FALSE), cbind(compare_PABD_count_wsp_LOO, species=TRUE)
,cbind(compare_PABD_PA_nosp_LOO, species=FALSE), cbind(compare_PABD_PA_wsp_LOO, species=TRUE)) %>%
mutate(Training_data = ifelse(otu_type=="NA", "Community traits",ifelse(otu_type=="count","ASV counts","ASV prevalence")))
# Updated random forest LOO results
load("./5_random_forest_LOO/compare_infect_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_count_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_count_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_infect_withpcount_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_count_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_count_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_withpcount_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_count_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_count_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_infect_withpcount_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_count_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_count_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/importance_PABD_withpcount_wsp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_onlyp_wsp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_onlyp_nosp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_count_wsp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_count_nosp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_PA_wsp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_PA_nosp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_withpPA_wsp_LOO.RData")
load("./5_random_forest_LOO/MSE_infect_withpcount_wsp_LOO.RData")
compare_PABD_onlyp_nosp_LOO
## Accuracy
errorRate_test_all <- rbind(cbind(compare_PABD_onlyp_nosp_LOO, species=FALSE), cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_count_nosp_LOO, species=FALSE), cbind(compare_PABD_count_wsp_LOO, species=TRUE)
,cbind(compare_PABD_PA_nosp_LOO, species=FALSE), cbind(compare_PABD_PA_wsp_LOO, species=TRUE)) %>%
mutate(Training_data = ifelse(otu_type=="NA", "Community traits",ifelse(otu_type=="count","ASV counts","ASV prevalence")))
compare_PABD_count_nosp_LOO
load("./5_random_forest_LOO/compare_PABD_count_nosp_LOO.RData")
load("./5_random_forest_LOO/compare_PABD_count_nosp_LOO.RData")
## Accuracy
errorRate_test_all <- rbind(cbind(compare_PABD_onlyp_nosp_LOO, species=FALSE), cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_count_nosp_LOO, species=FALSE), cbind(compare_PABD_count_wsp_LOO, species=TRUE)
,cbind(compare_PABD_PA_nosp_LOO, species=FALSE), cbind(compare_PABD_PA_wsp_LOO, species=TRUE)) %>%
mutate(Training_data = ifelse(otu_type=="NA", "Community traits",ifelse(otu_type=="count","ASV counts","ASV prevalence")))
errorRate_test_all_summary <- errorRate_test_all %>%
group_by(species, Training_data) %>%
summarize(correct=mean(Test_pred==Test_obs))
errorRate_test_all_summary
observed_only <- errorRate_test_all %>%
select(indivID, Test_obs, species) %>%
group_by(indivID, Test_obs, species) %>%
summarize(Infection_status=unique(Test_obs)) %>%
ungroup() %>% select(-Test_obs) %>% mutate(Training_data="Observed outcome")
errorRate_test_all %>%
select(indivID, species, Test_pred, Training_data) %>%
rename(Infection_status=Test_pred) %>%
rbind(observed_only) %>%
mutate(Training_data= factor(Training_data, levels=c("Observed outcome", "Community traits","ASV counts", "ASV prevalence")))%>%
ggplot() + geom_tile(aes(x=Training_data, y=indivID, fill=Infection_status)
, col="black", width=0.9) +
scale_fill_manual(values=c("darkred","lightblue"), name="Infection status") +
theme_bw() +
theme(axis.text.x = element_text(angle=90)) +
scale_x_discrete(breaks=c("Observed outcome","Community traits","ASV counts","ASV prevalence")
, labels=(c("Observed\noutcome","Community\ntraits","ASV\ncounts","ASV\nprevalence")))+
ylab("Amphibian ID") +xlab("Training Dataset") +
geom_vline(aes(xintercept=1.5), lwd=2)
MSE_test_all <- rbind(cbind(compare_infect_onlyp_nosp_LOO, species="No species predictor"), cbind(compare_infect_onlyp_wsp_LOO, species="With species as predictor")
, cbind(compare_infect_count_nosp_LOO, species="No species predictor"), cbind(compare_infect_count_wsp_LOO, species="With species as predictor")
,cbind(compare_infect_PA_nosp_LOO, species="No species predictor"), cbind(compare_infect_PA_wsp_LOO, species="With species as predictor")) %>%
group_by(species, otu_type) %>%
summarize(MSE=mean((Test_obs-Test_pred)^2)) %>%
unite(otu_type, species, col=group, remove=FALSE) %>%
mutate(Training_data = ifelse(otu_type=="NA", "Community traits",ifelse(otu_type=="count","ASV counts","ASV prevalence")))
MSE_test_all
MSE_train_all_long <- rbind(cbind(MSE_infect_onlyp_wsp_LOO, species="With species as predictor")
, cbind(MSE_infect_onlyp_nosp_LOO, species="No species predictor")
, cbind(MSE_infect_count_wsp_LOO, species="With species as predictor")
, cbind(MSE_infect_count_nosp_LOO, species="No species predictor")
, cbind(MSE_infect_PA_wsp_LOO, species="With species as predictor")
, cbind(MSE_infect_PA_nosp_LOO, species="No species predictor")) %>%
unite(otu_type, species, col=group, remove=FALSE) %>%
mutate(Training_data = ifelse(otu_type=="NA", "Community traits",ifelse(otu_type=="count","ASV counts","ASV prevalence"))) %>%
rename(MSE=error)
rbind(cbind(compare_infect_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_infect_PA_wsp_LOO, species=TRUE)
,cbind(compare_infect_withpPA_wsp_LOO, species=TRUE)) %>%
unite(otu_type, p_type, col=type,remove=FALSE) %>%
ggplot() + geom_point(aes(x=Test_obs, y=Test_pred, col=type)) + geom_abline(aes(intercept=0, slope=1))+
geom_smooth(aes(x=Test_obs, y=Test_pred, col=type), method="lm")+
ylim(0,8)+ xlim(0,8)
rbind(cbind(compare_infect_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_infect_PA_wsp_LOO, species=TRUE)
,cbind(compare_infect_withpPA_wsp_LOO, species=TRUE)) %>%
group_by(otu_type, p_type) %>%
summarize(MSE = mean((Test_obs-Test_pred)^2))
rbind(cbind(compare_infect_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_infect_count_wsp_LOO, species=TRUE)
,cbind(compare_infect_withpcount_wsp_LOO, species=TRUE)) %>%
unite(otu_type, p_type, col=type,remove=FALSE) %>%
ggplot() + geom_point(aes(x=Test_obs, y=Test_pred, col=type)) + geom_abline(aes(intercept=0, slope=1))+
geom_smooth(aes(x=Test_obs, y=Test_pred, col=type), method="lm")+
ylim(0,8)+ xlim(0,8)
rbind(cbind(compare_infect_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_infect_count_wsp_LOO, species=TRUE)
,cbind(compare_infect_withpcount_wsp_LOO, species=TRUE)) %>%
group_by(otu_type, p_type) %>%
summarize(MSE = mean((Test_obs-Test_pred)^2))
rbind(cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_count_wsp_LOO, species=TRUE)
,cbind(compare_PABD_withpcount_wsp_LOO, species=TRUE)) %>%
group_by(otu_type, p_type) %>%
summarize(errorRate = mean(Test_obs==Test_pred))
rbind(cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_count_wsp_LOO, species=TRUE)
,cbind(compare_PABD_withpcount_wsp_LOO, species=TRUE)) %>%
group_by(otu_type, p_type) %>%
summarize(correctRate = mean(Test_obs==Test_pred))
rbind(cbind(compare_PABD_onlyp_wsp_LOO, species=TRUE)
, cbind(compare_PABD_PA_wsp_LOO, species=TRUE)
,cbind(compare_PABD_withpPA_wsp_LOO, species=TRUE)) %>%
group_by(otu_type, p_type) %>%
summarize(correctRate = mean(Test_obs==Test_pred))
